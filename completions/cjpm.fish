set -l cjpm_commands init check update tree build run test bench clean install uninstall

complete -c cjpm -s h -l help -d "help for cjpm"
complete -c cjpm -s v -l version -n "not __fish_seen_subcommand_from init check update tree build run test bench clean install uninstall" -d "version for cjpm"

complete -c cjpm -n __fish_use_subcommand -a init -d "Init a new cangjie module"
complete -c cjpm -n __fish_use_subcommand -a check -d "Check the dependencies"
complete -c cjpm -n __fish_use_subcommand -a update -d "Update cjpm.lock"
complete -c cjpm -n __fish_use_subcommand -a tree -d "Display the package dependencies in the source code"
complete -c cjpm -n __fish_use_subcommand -a build -d "Compile the current module"
complete -c cjpm -n __fish_use_subcommand -a run -d "Compile and run an executable product"
complete -c cjpm -n __fish_use_subcommand -a test -d "Unittest a local package or module"
complete -c cjpm -n __fish_use_subcommand -a bench -d "Run benchmarks in a local package or module"
complete -c cjpm -n __fish_use_subcommand -a clean -d "Clean up the target directory"
complete -c cjpm -n __fish_use_subcommand -a install -d "Install a cangjie binary"
complete -c cjpm -n __fish_use_subcommand -a uninstall -d "Uninstall a cangjie binary"

# init subcommand
complete -c cjpm -n "__fish_seen_subcommand_from init" -l workspace -d "initialize a workspace's default configuration file"
complete -c cjpm -n "__fish_seen_subcommand_from init" -l name -r -d "specify root package name, default as current directory name"
complete -c cjpm -n "__fish_seen_subcommand_from init" -l path -r -d "specify path to create the module, default as current directory"
complete -c cjpm -n "__fish_seen_subcommand_from init" -l type -r -f -a "executable static dynamic" -d "define output type of current module."

# check subcommand
complete -c cjpm -n "__fish_seen_subcommand_from check" -s m -l member -r -d "specify a member module of the workspace"
complete -c cjpm -n "__fish_seen_subcommand_from check" -l no-tests -d "exclude the test-dependencies"
complete -c cjpm -n "__fish_seen_subcommand_from check" -l skip-script -d "disable script 'build.cj'"

# update subcommand
complete -c cjpm -n "__fish_seen_subcommand_from update" -l skip-script -d " disable script 'build.cj'"

# tree subcommand
complete -c cjpm -n "__fish_seen_subcommand_from tree" -s V -l verbose -d "enable verbose"
complete -c cjpm -n "__fish_seen_subcommand_from tree" -l depth -r -d "maximum display depth of the dependency tree"
complete -c cjpm -n "__fish_seen_subcommand_from tree" -s p -l package -r -d "package to be used as the root of the tree"
complete -c cjpm -n "__fish_seen_subcommand_from tree" -l invert -r -d "invert the tree direction and focus on the given package"
complete -c cjpm -n "__fish_seen_subcommand_from tree" -l target -r -d " display dependencies for the given target platform"
complete -c cjpm -n "__fish_seen_subcommand_from tree" -l no-tests -d "exclude the test-dependencies"
complete -c cjpm -n "__fish_seen_subcommand_from tree" -l skip-script -d " disable script 'build.cj'"

# build subcommand
complete -c cjpm -n "__fish_seen_subcommand_from build " -s i -l incremental -d "enable incremental compilation"
complete -c cjpm -n "__fish_seen_subcommand_from build " -s j -l jobs -r -d "the number of jobs to spawn in parallel during the build process"
complete -c cjpm -n "__fish_seen_subcommand_from build " -s V -l verbose -d "enable verbose"
complete -c cjpm -n "__fish_seen_subcommand_from build " -s g -d "enable compile debug version target"
complete -c cjpm -n "__fish_seen_subcommand_from build " -l coverage -d "enable coverage"
complete -c cjpm -n "__fish_seen_subcommand_from build " -l cfg -d "enable the customized option 'cfg'"
complete -c cjpm -n "__fish_seen_subcommand_from build " -s m -l member -r -d "specify a member module of the workspace"
complete -c cjpm -n "__fish_seen_subcommand_from build " -l target -r -d "generate code for the given target platform"
complete -c cjpm -n "__fish_seen_subcommand_from build " -l target-dir -r -d "specify target directory"
complete -c cjpm -n "__fish_seen_subcommand_from build " -s o -l output -r -d "specify product name when compiling an executable file"
complete -c cjpm -n "__fish_seen_subcommand_from build " -s l -l lint -d "enable cjlint code check"
complete -c cjpm -n "__fish_seen_subcommand_from build " -l mock -d "enable support of mocking classes in tests"
complete -c cjpm -n "__fish_seen_subcommand_from build " -l skip-script -d "disable script 'build.cj'"

# run subcommand
complete -c cjpm -n "__fish_seen_subcommand_from run" -l name -r -d "name of the executable product to run, default to 'main'"
complete -c cjpm -n "__fish_seen_subcommand_from run" -l build-args -r -d "the arguments to pass to the build process"
complete -c cjpm -n "__fish_seen_subcommand_from run" -l skip-build -r -d "skip compile, only run the executable product"
complete -c cjpm -n "__fish_seen_subcommand_from run" -l run-args -r -d "the arguments to pass to the executable product"
complete -c cjpm -n "__fish_seen_subcommand_from run" -l target-dir -r -d "specify target directory"
complete -c cjpm -n "__fish_seen_subcommand_from run" -s g -d "enable debug version"
complete -c cjpm -n "__fish_seen_subcommand_from run" -s V -l verbose -d "enable verbose"
complete -c cjpm -n "__fish_seen_subcommand_from run" -l skip-script -d "disable script 'build.cj'"

# test subcommand
complete -c cjpm -n "__fish_seen_subcommand_from test" -s j -l jobs -r -d "the number of jobs to spawn in parallel during the test process"
complete -c cjpm -n "__fish_seen_subcommand_from test" -s V -l verbose -d "enable verbose"
complete -c cjpm -n "__fish_seen_subcommand_from test" -s g -d "enable compile debug version tests"
complete -c cjpm -n "__fish_seen_subcommand_from test" -s i -l incremental -d "enable incremental compilation"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l no-run -d "compile, but don't run tests"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l skip-build -d "skip compile, only run tests"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l coverage -d "enable coverage"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l cfg -d "enable the customized option 'cfg'"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l module -r -d "specify modules to test, default as current module"
complete -c cjpm -n "__fish_seen_subcommand_from test" -s m -l member -r -d "specify a member module of the workspace"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l target -r -d "unittest for the given target platform"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l target-dir -r -d "specify target directory"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l dry-run -d "print tests without execution"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l filter -r -d "enable filter test"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l include-tags -r -d "run tests with specified tags"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l exclude-tags -r -d "run tests without specified tags"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l no-color -d "enable colorless result output"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l random-seed -r -d "enable random seed"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l timeout-each -r -d "specify default timeout for test cases"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l parallel -r -d "specify number of workers running tests"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l show-all-output -d "enable test output printing for all test cases including passed ones"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l no-capture-output -d "disable test output capturing, output will be printed during test execution immediately"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l report-path -r -d "specify path to directory of report"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l report-format -r -d "specify format of report"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l skip-script -d "disable script 'build.cj'"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l no-progress -d "disable progress report"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l progress-brief -d "display brief progress report instead of detailed one"
complete -c cjpm -n "__fish_seen_subcommand_from test" -l progress-entries-limit -d "limit the entries amount displayed in the progress report"

# bench subcommand
complete -c cjpm -n "__fish_seen_subcommand_from bench" -s j -l jobs -r -d "the number of jobs to spawn in parallel during the test process"
complete -c cjpm -n "__fish_seen_subcommand_from bench" -s V -l verbose -d "enable verbose"
complete -c cjpm -n "__fish_seen_subcommand_from bench" -s g -d "enable compile debug version tests"
complete -c cjpm -n "__fish_seen_subcommand_from bench" -s i -l incremental -d "enable incremental compilation"
complete -c cjpm -n "__fish_seen_subcommand_from bench" -l no-run -d "compile, but don't run tests"
complete -c cjpm -n "__fish_seen_subcommand_from bench" -l skip-build -d "skip compile, only run tests"
complete -c cjpm -n "__fish_seen_subcommand_from bench" -l cfg -d "enable the customized option 'cfg'"
complete -c cjpm -n "__fish_seen_subcommand_from bench" -l module -r -d "specify modules to test, default as current module"
complete -c cjpm -n "__fish_seen_subcommand_from bench" -s m -l member -r -d "specify a member module of the workspace"
complete -c cjpm -n "__fish_seen_subcommand_from bench" -l target -r -d "unittest for the given target platform"
complete -c cjpm -n "__fish_seen_subcommand_from bench" -l target-dir -r -d "specify target directory"
complete -c cjpm -n "__fish_seen_subcommand_from bench" -l dry-run -d "print benchmarks without execution"
complete -c cjpm -n "__fish_seen_subcommand_from bench" -l filter -r -d "enable filter test"
complete -c cjpm -n "__fish_seen_subcommand_from bench" -l include-tags -r -d "run tests with specified tags"
complete -c cjpm -n "__fish_seen_subcommand_from bench" -l exclude-tags -r -d "run tests without specified tags"
complete -c cjpm -n "__fish_seen_subcommand_from bench" -l no-color -d "enable colorless result output"
complete -c cjpm -n "__fish_seen_subcommand_from bench" -l random-seed -r -d "enable random seed"
complete -c cjpm -n "__fish_seen_subcommand_from bench" -l report-path -r -d "specify path to directory of report"
complete -c cjpm -n "__fish_seen_subcommand_from bench" -l report-format -r -d "specify format of report"
complete -c cjpm -n "__fish_seen_subcommand_from bench" -l baseline-path -r -d "specify path to directory of report to compare the results with"
complete -c cjpm -n "__fish_seen_subcommand_from bench" -l skip-script -d "disable script 'build.cj'"

# clean subcommand
complete -c cjpm -n "__fish_seen_subcommand_from clean" -s g -d "clean debug version in target directory"
complete -c cjpm -n "__fish_seen_subcommand_from clean" -l target-dir -r -d "specify target directory"
complete -c cjpm -n "__fish_seen_subcommand_from clean" -l skip-script -d "disable script 'build.cj'"

# install subcommand
complete -c cjpm -n "__fish_seen_subcommand_from install" -s V -l verbose -d "enable verbose"
complete -c cjpm -n "__fish_seen_subcommand_from install" -s m -l member -r -d "specify a member module of the workspace"
complete -c cjpm -n "__fish_seen_subcommand_from install" -s g
complete -c cjpm -n "__fish_seen_subcommand_from install" -l path -r -d "specify path of source module, default as current path"
complete -c cjpm -n "__fish_seen_subcommand_from install" -l root -r -d "specify path of installed binary"
complete -c cjpm -n "__fish_seen_subcommand_from install" -l git -r -d "specify url of installed git module"
complete -c cjpm -n "__fish_seen_subcommand_from install" -l branch -r -d "specify branch of installed git module"
complete -c cjpm -n "__fish_seen_subcommand_from install" -l tag -r -d "specify tag of installed git module"
complete -c cjpm -n "__fish_seen_subcommand_from install" -l command -r -d "specify commit ID of installed git module"
complete -c cjpm -n "__fish_seen_subcommand_from install" -s j -l jobs -r -d "the number of jobs to spawn in parallel during the build process"
complete -c cjpm -n "__fish_seen_subcommand_from install" -l cfg -d "enable the customized option 'cfg'"
complete -c cjpm -n "__fish_seen_subcommand_from install" -l target-dir -r -d "specify target directory"
complete -c cjpm -n "__fish_seen_subcommand_from install" -l name -r -d "specify product name to install, default to install all products"
complete -c cjpm -n "__fish_seen_subcommand_from install" -l skip-build -d "install binary in target directory directly without building"
complete -c cjpm -n "__fish_seen_subcommand_from install" -l list -d "list all installed modules and their versions"
complete -c cjpm -n "__fish_seen_subcommand_from install" -l skip-script -d "disable script 'build.cj'"

# uninstall subcommand
complete -c cjpm -n "__fish_seen_subcommand_from uninstall" -l root -r -d "Specify root directory"
